{
  "name": "inh",
  "version": "0.0.1",
  "description": "both browser- and node-friendly inherits() for browserify",
  "keywords": [
    "inherits",
    "browserify",
    "browser",
    "node"
  ],
  "author": {
    "name": "Dmitry Smolin",
    "email": "dimsmol@gmail.com"
  },
  "preferGlobal": false,
  "private": false,
  "engines": {
    "node": "~0.8.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/dimsmol/inh"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/index",
  "browser": "./lib/client",
  "readme": "# inh\n\n[inherits](http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor) for [browserify](https://github.com/substack/node-browserify)\n\n`inherits` function is used in almost every module. It is located in `util` package and browserify provides you browser-adapted shim of this package. It's good, but the shim is very large, because:\n\n* it contains polyfill to make `inherits` work with old browsers\n* it contains a lot of unrelated stuff\n* it contains the shim for `process` global, because this unrelated stuff depends on it\n\nbrowserify produces a lot of supportive code for `util` package. It is ok for large projects, but too much for tiny libraries.\n\n`inh` is aimed to solve this problem. For node.js it just returns standard `inherits` implementation from `util` package, but for browserify it provides browser-specific version (using \"browser\" key in package.json).\n\nIt's recommended to use `inh` in all your code that can be used on client side.\n\n## Usage\n\nnpm install inh and then use\n\n```javascript\nvar inherits = require('inh');\n```\n\ninstead of\n\n```javascript\nvar inherits = require('util').inherits;\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dimsmol/inh/issues"
  },
  "_id": "inh@0.0.1",
  "_from": "inh@~0.0.1"
}
