#!/bin/sh

load_timestamp()
{
  local path="$1"
  local platform="$2"

  local timestamp_dir="`dirname "$path"`"
  local timestamp_path="$timestamp_dir/logs/$platform/timestamp"

  if [ "$timestamp" ]; then
    return 0
  fi

  if [ -f "$timestamp_path" ]; then
    timestamp="`cat "$timestamp_path" 2>/dev/null`"
  fi

  if [ -z "$timestamp" ]; then
    timestamp="`date +%Y%m%d-%H%M%S`"
    echo -n "$timestamp" > "$timestamp_path"
  fi

  if [ -z "$timestamp" ]; then
    return 1
  fi

  return 0
}

print_status()
{
  local name="$1"
  local message="$2"

  printf "\033[1A\r\033[K\r%9s: %s\n" \
    "$name" "$message" >&2
}

logger()
{
  local name="$1"
  local platform="$2"
  local is_silent="$3"

  local directory="`dirname "$name"`" # Defaults to '.'
  local safe_name="`echo "$name" | sed -E 's/\//-/g;' 2>/dev/null`"

  local output_dir="$directory/logs/$platform"
  local output_path="$output_dir/$safe_name-$timestamp.log"

  mkdir -p "$output_dir"

  if [ "$is_silent" ]; then
    cat >> "$output_path"
    return "$?"
  fi

  local line=0
  local lines_denominator=''
  local stats_path="$directory/stats/$platform/$safe_name.count"
  local expected_lines="`cat "$stats_path" 2>/dev/null`"

  if [ -z "$expected_lines" ]; then
    expected_lines=0
  else
    lines_denominator=" of $expected_lines"
  fi

  pv -h &>/dev/null

  if [ $? -eq 0 ]; then
    while read x; do
      line=$[$line + 1]
      if [ "$line" -le "$expected_lines" ]; then
        echo "$x"
      else
        echo "$x" >> "$output_path"
      fi
    done | pv -petlc -i 0.5 -N "$safe_name" -s "$expected_lines" \
      >> "$output_path"

    local date="`date +'%I:%M:%S%p' | tr '[A-Z]' '[a-z]'`"

    print_status "$name" \
      "Build process completed at $date" >&2
  else
    while read i; do
      line=$[$line + 1]
      echo "$i" >> "$output_path"
      printf '\r%9s: %s; %s' "$name" \
        'Estimate not yet available' \
        "$line$lines_denominator lines processed... " >&2
    done
    echo 'done.' >&2
  fi

  return "$?"
}

