#!/bin/bash

set -o pipefail

self="`readlink -f "$0" 2>/dev/null || realpath "$0"`"
base_dir="`dirname "$self"`/.."

fatal()
{
  echo "Fatal error: $*" >&2
  exit 111
}

source "$base_dir/scripts/include/logger" 2>/dev/null &&
source "$base_dir/scripts/include/builder" 2>/dev/null \
  || fatal 'Unable to load a required library'

usage()
{
  echo
  echo "Usage:" >&2
  echo "  $0 root-directory" >&2
  echo

  exit 111
}

main()
{
  local prefix="$1"
  local pkg_start="`echo "$2" | sed -E 's/\//-/g;'`"
  local pkg_start_version="$3"
  local pkg_stop="`echo "$4" | sed -E 's/\//-/g;'`"
  local pkg_stop_version="$5"
  local platform="$6"
  local bits="$7"
  local parallel="$8"

  check_args "$@" || usage

  local uname="`uname -s`"
  local stdarg="--prefix='$prefix'"

  builder_initialize &&
  builder_setup_environment "$prefix" \
    "$pkg_start" "$pkg_start_version" "$pkg_stop" \
      "$pkg_stop_version" "$uname" "$architecture" "$bits" "$parallel"

  [ $? -eq 0 ] \
    || fatal 'Failed to set up build environment'

  # Package-specific options:
  #  These are used to vary configuration based upon
  #  the architecture that we're currently compiling for.

  local gammu_extra_options=""
  local erlang_extra_options=""

  if [ "$architecture" = 'intel' -a "$bits" ]; then
    erlang_extra_options="--enable-m${bits}-build"
  fi

  if [ "$uname" = 'Darwin' ]; then
    disable_stack_protector_strong
    gammu_extra_options='-DWITH_Iconv=OFF'
  fi

  if ! builder_setup_cache; then
    warn 'Compiler caching could not be enabled'
  fi

  (disable_stack_protector &&
    build_autoconf 'pv' "$stdarg") &&
  \
  (disable_parallelism && simple_cflags &&
    build_autoconf 'zlib' "--shared $stdarg") &&
  \
  builder_remove_static_libraries 'z' &&
  \
  build_bzip2 'bzip2' "$prefix" &&
  builder_remove_static_libraries 'bz2' &&
  \
  build_autoconf 'libusb' \
    "$stdarg --enable-static=no --enable-shared=yes" &&
  \
  build_autoconf 'libusb-compat' \
    "$stdarg --enable-static=no --enable-shared=yes" &&
  \
  build_autoconf 'ncurses' "$stdarg --with-shared" &&
  builder_create_library_aliases 'ncurses' "$prefix" 'ncurses' 'tinfo' &&
  \
  builder_remove_static_libraries 'form' 'form_g' \
    'menu' 'menu_g' 'ncurses' 'ncurses_g' 'ncurses++' 'panel' 'panel_g' &&
  \
  build_autoconf 'popt' "$stdarg --enable-shared --disable-static" &&
  \
  if [ "$build_platform" = 'linux-elf' ]; then

    local initrd_prefix="`readlink -f "../../../initrd/$platform"`" \
      || fatal 'Unable to locate initrd directory'

    build_make_install 'libutempter' "$prefix" \
      "DESTDIR='$prefix' libdir=/lib \
       libexecdir=/lib includedir=/include mandir=/man" &&
    \
    builder_remove_static_libraries 'utempter' &&
    \
    build_autoconf 'screen' "$stdarg" &&
    build_autoconf 'strace' "$stdarg" &&
    \
    build_autoconf 'usbutils' \
      "$stdarg UDEV_CFLAGS='-I$initrd_prefix/usr/include' \
       UDEV_LIBS='-L$initrd_prefix/lib -l:libudev.so.1'" &&
    \
    (disable_parallelism && build_make 'usb-modeswitch' \
     'install-static' "DESTDIR='$prefix' PREFIX='$prefix'" 'y') &&
    \
    (disable_parallelism && build_make 'usb-modeswitch-data' \
     'install' "DESTDIR='$prefix' PREFIX='$prefix'") &&
    \
    # In libacl, libattr: make reinstall safe
    rm -f "$prefix/lib/libattr.so".* "$prefix/lib/libacl.so".* &&
    \
    (disable_parallelism && build_autoconf 'attr' \
      "$stdarg --enable-shared=yes --enable-static=no" '' 'install-lib') &&
    \
    (disable_parallelism && build_autoconf 'acl' \
      "$stdarg --enable-shared=yes --enable-static=no" '' 'install-lib') &&
    \
    build_autoconf 'inotify-tools' \
      "$stdarg --enable-shared=yes --enable-static=no" &&
    \
    build_make_install 'paxctl' "$prefix" "DESTDIR='$prefix'"

  fi &&
  \
  if [ "$bits" -eq 32 ]; then
    build_make_install 'bladox-tools' "$prefix" "PREFIX='$prefix'"
  fi &&
  \
  (disable_parallelism && build_make 'logrotate' 'all install' \
    "PREFIX='$prefix' LFS='$CFLAGS' LDFLAGS='$LDFLAGS' BASEDIR=''") &&
  \
  build_autoconf 'xdelta' "$stdarg" &&
  build_autoconf 'xz' "$stdarg --enable-shared --disable-static" &&
  build_autoconf 'lzo' "$stdarg --enable-shared --disable-static" &&
  build_autoconf 'lrzip' "$stdarg --enable-shared --disable-static" &&
  \
  build_autoconf 'diffutils' "$stdarg" &&
  build_autoconf 'patch' "$stdarg" &&
  build_autoconf 'nano' "$stdarg --with-shared --enable-utf8" &&
  \
  (disable_parallelism && build_config 'openssl' \
    "shared no-asm zlib-dynamic --openssldir='$prefix/etc/ssl' $stdarg") &&
  \
  builder_remove_static_libraries 'crypto' 'ssl' &&
  \
  build_autoconf 'openssh' \
    "$stdarg --sysconfdir='$prefix/etc/ssh' \
     --with-zlib='$prefix' --with-ssl-dir='$prefix'" &&
  \
  build_autoconf 'libpcap' \
    "$stdarg --enable-shared --disable-static --without-libnl" &&
  \
  builder_remove_static_libraries 'pcap' &&
  build_autoconf 'tcpdump' "$stdarg --disable-smb --without-libnl" &&
  \
  build_autoconf 'libidn' "$stdarg" &&
  builder_remove_static_libraries 'idn' &&
  \
  (disable_library_path && build_autoconf 'readline' \
    "$stdarg --build='$build_arch' --enable-static=no --enable-shared=yes") &&
  \
  (remove_cppflags_from_cflags &&
   simple_cflags && build_autoconf 'curl' \
    "$stdarg --with-ssl-dir='$prefix' \
     --with-zlib='$prefix' --with-libidn='$prefix' \
     --with-ca-bundle='$prefix/share/curl/ca-bundle.crt'") && \
  \
  builder_remove_static_libraries 'curl' &&
  \
  builder_install_file 'curl' '../patches/curl-ca-bundle.crt' \
    "$prefix/share/curl/ca-bundle.crt" &&
  \
  build_autoconf 'icu' "$stdarg" &&
  \
  build_autoconf 'pcre' \
    "$stdarg --enable-utf \
     --enable-jit --enable-shared --disable-static \
     --enable-unicode-properties --enable-pcregrep-libbz2 \
     --enable-pcregrep-libz --enable-pcretest-libreadline" &&
  \
  build_autoconf 'git' \
    "$stdarg --with-openssl='$prefix' --with-curl='$prefix' \
     --with-zlib='$prefix' --with-libpcre='$prefix' \
     --without-iconv" '' "NO_INSTALL_HARDLINKS='1'" &&
  \
  build_autoconf 'rsync' "$stdarg" &&
  \
  (ldflags_in_cflags && build_autoconf 'nginx' \
    "$stdarg --sbin-path='$prefix/bin' \
     --with-http_ssl_module --with-http_v2_module \
     --conf-path='$prefix/etc/nginx/nginx.conf' \
     --pid-path='$prefix/var/run/nginx/nginx.pid' \
     --lock-path='$prefix/var/run/nginx/nginx.lock' \
     --error-log-path='$prefix/var/log/nginx/error.log'" \
       "LINK='$CC $CFLAGS $LDFLAGS'") &&
  \
  (simple_cflags &&
    build_autoconf 'node' \
      "$stdarg --shared-zlib \
       --shared-zlib-includes='$prefix/include' \
       --shared-zlib-libpath='$prefix/lib' \
       --shared-openssl --shared-openssl-includes='$prefix/include' \
       --shared-openssl-libpath='$prefix/lib' --dest-cpu='$build_cpu'") &&
  \
  (disable_parallelism && disable_cppflags &&
    build_autoconf 'js' \
      "$stdarg --host='$build_arch' --with-cpu-arch='$build_cpu'") &&
  \
  builder_remove_static_libraries 'js' &&
  \
  build_autoconf 'erlang' \
    "$stdarg $build_extra_options --enable-kernel-poll \
     --enable-dynamic-ssl-lib --with-ssl='$prefix' \
     --enable-shared-zlib='$prefix' $erlang_extra_options" &&
  \
  (disable_parallelism && \
    builder_fix_erlang_dso_linkage "$bits") &&
  \
  build_rebar 'rebar' "$prefix" './bootstrap' &&
  build_rebar 'erica' "$prefix" 'make' &&
  \
  build_autoconf 'libffi' "$stdarg" && \
  builder_remove_static_libraries 'ffi' &&
  \
  build_cmake 'gammu' "$prefix" \
    "-DBUILD_SHARED_LIBS=ON -DWITH_Glib=OFF \
     -DINSTALL_BASH_COMPLETION=OFF -DENABLE_PROTECTION=ON \
     -DINSTALL_GNAPPLET=OFF -DWITH_BACKUP=OFF $gammu_extra_options" &&
  \
  build_make_install 'gammu-json' "$prefix" "PREFIX='$prefix'" &&
  \
  build_autoconf 'couchdb' \
    "$stdarg --with-js-lib-name=mozjs185 \
      --with-erlang='$prefix/lib/erlang/usr/include' \
      --with-js-include='$prefix/include/js' --with-js-lib='$prefix/lib'" &&
  \
  build_npm_local 'nodelint' "$prefix" &&
  \
  if [ "`build_version 'node' 2`" -ge 10 ]; then
    build_npm_remote 'node-gyp' "$prefix"
  fi &&
  \
  build_npm_remote 'async' "$prefix" &&
  build_npm_remote 'express' "$prefix" &&
  build_npm_remote 'garden-core' "$prefix" &&
  build_npm_remote 'kanso' "$prefix" &&
  build_npm_remote 'lazy' "$prefix" &&
  build_npm_remote 'request' "$prefix" &&
  build_npm_remote 'hbs' "$prefix" &&
  build_npm_remote 'grunt-cli' "$prefix" &&
  \
  build_npm_local 'medic-transport' "$prefix" &&
  build_npm_local 'node-fs-ext' "$prefix" 't' &&
  build_npm_local 'node-gammu-json' "$prefix" &&
  \
  # Maven: make reinstall safe
  builder_clear_java_directory 'java' "$prefix" &&
  \
  build_ant 'ant' "$prefix" &&
  build_maven 'maven' "$prefix" &&
  build_couchdb_lucene 'couchdb-lucene' "$prefix" &&
  \
  builder_set_library_executable_bits "$prefix" &&
  builder_remove_library_metadata "$prefix"

  if [ "$?" -ne 0 ]; then
    fatal 'One or more build steps failed; aborting'
  fi

  return 0
}

check_args()
{
  local prefix="$1"

  [ -d "$prefix" ] 
}

cd "$base_dir/source" && main "$@"
exit $?

