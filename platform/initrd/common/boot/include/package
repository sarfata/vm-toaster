#!/bin/sh

set -o pipefail

srv_dir='/srv'
receipts_dir="$srv_dir/system/storage/receipts"
settings_dir="$srv_dir/system/settings/packages"
supervisor_dir="$srv_dir/system/storage/supervisor"

package_extract_metadata()
{
  local path="$1"
  local metadata_key="$2"

  if ! [ -r "$path" ]; then
    return 1
  fi

  ar -p "$path" "$metadata_key" 2>/dev/null
  return "$?"
}

package_extract_name()
{
  local path="$1"

  package_extract_metadata "$path" 'name'
  return "$?"
}

package_extract_version()
{
  local path="$1"

  package_extract_metadata "$path" 'version'
  return "$?"
}

package_extract_digest()
{
  local path="$1"
  local digest_type="$2"

  if ! [ "$digest_type" ]; then
    digest_type='sha512'
  fi

  package_extract_metadata "$path" "digest-$digest_type"
  return "$?"
}

package_retrieve_installed_version()
{
  local package="$1"

  cat "$receipts_dir/$package/version" 2>/dev/null
  return "$?"
}

package_install()
{
  local path="$1"

  if ! [ -r "$path" ]; then
    return 1
  fi

  local package="`package_extract_name "$path"`" &&
  local version="`package_extract_version "$path"`"

  if [ "$?" -ne 0 ]; then
    return 2
  fi
 
  log "Installing package '$package'"

  mkdir -p "$receipts_dir/$package" &&
    echo -n "$version" > "$receipts_dir/$package/version"

  if [ "$?" -ne 0 ]; then
    rm -f "$receipts_dir/$package/version"
    return 3
  fi

  log "Extracting files for package '$package'"

  mkdir -p "$receipts_dir/$package" "$srv_dir/scripts/$package" &&
    ar -p "$path" package.tar.xz | xz -dc \
      | (cd "$srv_dir" && tar -xvf - > "$receipts_dir/$package/manifest")

  if [ "$?" -ne 0 ]; then
    warn "Failed to extract files for package '$package' from '$path'"
    rm -f "$receipts_dir/$package"
    return 4
  fi

  if [ -x "$srv_dir/scripts/$package/install" ]; then

    log "Running installation script for package '$package'"

    "$srv_dir/scripts/$package/install" \
      || warn "Installation script for package '$package' failed"

    if [ "$?" -ne 0 ]; then
      rm -rf "$receipts_dir/$package"
      return 5
    fi
  else
    log "Skipping installation script for package '$package'"
    log "File '$srv_dir/scripts/$package/install' is not executable"
  fi

  log "Successfully installed package '$package'"
  sync

  return 0
}

package_remove()
{
  local package="`basename -- "$1"`"

  log "Removing package '$package'"
  log "Stopping services for package '$package'"

  supervisor_stop "$package"
  local rv="$?"

  if [ "$rv" -eq 253 ]; then
    info "Package '$package' has no services to stop; continuing"
  elif [ "$rv" -ne 0 ]; then
    warn "Failed to stop services for package '$package'"
    return 1
  fi

  log "Removing package '$package'"

  if [ -x "$srv_dir/scripts/$package/remove" ]; then
    if ! "$srv_dir/scripts/$package/remove"; then
      warn "Removal script for '$package' exited with non-zero status"
      return 2
    fi
  fi

  rm -rf "$receipts_dir/$package" \
    "$supervisor_dir/$package" "$settings_dir/$package"

  if [ "$?" -gt 0 ]; then
    warn "Failed to remove installation records for package '$package'"
    return 3
  fi

  log "Successfully removed package '$package'"
  sync

  return 0
}

package_update()
{
  local path="$1"
  local force_install="$2"

  local package="`package_extract_name "$path"`" &&
  local v_new="`package_extract_version "$path"`" &&
  local v_prev="`package_retrieve_installed_version "$package"`"

  log "Updating package '$package'"
  log "Examining version information for package '$package'"

  if [ "$?" -ne 0 ]; then
    warn "Failed to read metadata from package file '$file'"
    return 1
  fi

  if ! [ "$v_new" -gt 0 ] 2>/dev/null; then
    warn "Invalid package version information in file '$file'"
    return 2
  fi

  if [ "$v_prev" ]; then
    if [ "$v_prev" -gt "$v_new" -a -z "$force_install" ]; then

      warn "A newer version of '$package' is already installed"
      warn "Use the force-install option if you want to install it anyway"
      return 3

    elif [ "$v_prev" -lt "$v_new" ] 2>/dev/null; then

      force_install='t'
      log "Removing package '$package'"

      if ! package_remove "$package"; then
        warn "Failed to completely remove package '$package'"
        return 4
      fi
    else
      warn "Version '$v_prev' of package '$package' is already installed"
    fi
  else
    force_install='t'
    log "Package '$package' is not installed yet; installing"
  fi

  if [ "$force_install" ]; then
    log "Installing package '$package'"
    if ! package_install "$path"; then
      warn "Package '$package' encountered an error during installation"
      warn "Software installation from file '$file' was unsuccessful"
      return 5
    fi
  fi

  log "Running setup tasks for package '$package'"

  if ! package_setup "$package"; then
    warn "At least one setup script in package '$package' failed"
    warn "Your installation of '$package' may be incomplete"
    return 6
  fi

  log "Finished examining package '$package'"
  return 0
}

package_merge_environment()
{
  local package="$1"

  local env_file="$srv_dir/scripts/$package/env"

  if [ -f "$env_file" ]; then
    source "$env_file"
    merge_environment "$srv_dir" &>/dev/null
    unset merge_environment
  fi
}

package_setup()
{
  local package="`basename -- "$1"`"

  for script in "$srv_dir/scripts/$package/setup"/*; do
    if [ -x "$script" ]; then

      local task_name="$package/`basename -- "$script"`"
      log "Running setup task '$task_name'"

      "$script" >> "$log" 2>&1 \
        || warn "Setup task '$task_name' was not successful"
      
      log "Finished setup task '$task_name'"
    fi
  done

  package_regenerate_settings "$package"
  return "$?"
}

package_regenerate_settings()
{
  local package="`basename -- "$1"`"

  local src_dir="$srv_dir/settings/$package"
  local target_dir="$settings_dir/$package"

  log "Regenerating settings for package '$package'"

  if ! [ -d "$src_dir" ]; then
    log "Package '$package' has no settings directory; skipping"
    return 0
  fi

  mkdir -p "$target_dir" &&
  \
  template_expand_directories \
    'mustache' 't' "$src_dir" "$target_dir"

  log "Finished regenerating settings for package '$package'"
  return "$?"
}

package_remove_empty_directories()
{
  local package="`basename -- "$1"`"
  local software_dir="$srv_dir/software/$package"

  local file_count="`
    find "$software_dir" -type f 2>/dev/null | wc -l
  `"

  [ "$?" -eq 0 ] || return 1
    
  if [ "$file_count" -eq 0 ]; then
    rm -rf "$software_dir" || return 2
  fi

  return 0
}
