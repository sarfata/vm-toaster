#!/bin/sh

source '/boot/include/utility'
source '/boot/include/logger'
source '/boot/include/cursor'
source '/boot/include/startup'
source '/boot/include/package'
source '/boot/include/template'
source '/boot/include/supervisor'
source '/boot/include/hypervisor'

wait_for_ip_address()
{
  local timeout="$1"

  if [ -z "$timeout" ]; then
    timeout='20'
  fi

  for i in `seq 1 "$timeout"`; do
    local ip_address="`discover_ip_address 2>> "$log"`"
    if [ "$?" -ne 0 -o -z "$ip_address" ]; then
      sleep 1
    else
      break
    fi
  done

  if [ -z "$ip_address" ]; then
    return 1
  fi

  echo "$ip_address"
  return 0
}

main()
{
  local version='10100'
  local swap_size='1024'
  local source_device='/dev/sr0'

  local scan_devices='
    /dev/sda /dev/hda /dev/xvda /dev/sdb /dev/hdb /dev/xvdb
      /dev/sdc /dev/hdc /dev/xvdc /dev/sdd /dev/hdd /dev/xvdd
      /dev/sde /dev/hde /dev/xvde /dev/sdf /dev/hdf /dev/xvdf
      /dev/sdg /dev/hdg /dev/xvdg /dev/sdh /dev/hdh /dev/xvdh
      /dev/sdi /dev/hdi /dev/xvdi /dev/sdj /dev/hdj /dev/xvdj
  '

  local found_device=''
  local found_version=''

  if [ "`hypervisor_type`" = 'xen' ]; then
    source_device='/dev/xvda1'
  fi

  supervisor_init

  set_echo 0
  set_bold 1
  set_cursor 0
  set_console_blanking 0

  display_centered 'Starting up...'
  log "Storage initialization started at `date`"

  mount_source_image "$source_device" \
    || fatal 'Failed to mount the ISO image; possible problem with media'

  # Network connection:
  #   Get an IP address via DHCP, and ensure we have network
  #   connectivity before continuing on with installation or updates.

  local ip_address=''
  display_centered 'Setting up network connection...'

  ip_address="`wait_for_ip_address`"

  if [ $? -ne 0 ]; then
    display_centered 'Checking for alternate network configuration...' &&
    attempt_manual_network_configuration &&
    ip_address="`wait_for_ip_address`"

    if [ $? -ne 0 ]; then
      fatal 'Failed to obtain an IP address for this virtual machine'
    fi
  fi

  # Look for existing storage:
  #   Use the first valid virtual disk that we find, provided
  #   it wasn't initialized by a future version of this script.

  display_centered 'Locating startup disk...'

  for device in `echo -n "$scan_devices"`; do
    local v="`find_storage "$device"`"

    if [ "$?" -eq 0 -a "$v" -le "$version" ] &>/dev/null; then
      found_version="$v"
      found_device="$device"
      break;
    fi
  done

  # Can't find storage:
  #   Find the first virtual disk that contains all zeros in the
  #   area where a disk label or partition table should be. This
  #   disk should be safe to initialize and use for programs/data.

  local is_newly_initialized=''
  display_centered 'Checking for persistent storage...'

  if [ -z "$found_version" ]; then
    for device in `echo -n "$scan_devices"`; do
      if is_storage_valid "$device"; then

        initialize_storage "$device" "$swap_size" "$version" \
          >> "$log" 2>&1

        if [ "$?" -eq 0 ]; then
          found_device="$device"
          found_version="$version"
          is_newly_initialized='t'
          break
        fi

      fi
    done
  fi

  # Disk found?
  #   If so, check its version and update its software if necessary.

  if [ -z "$found_device" ]; then
    fatal 'Failed to find a suitable disk; check VM configuration'
  fi

  if [ "$found_version" -lt "$version" ]; then
    update_system "$version" \
      || fatal 'Failed to update base system; please contact support.'
  fi

  # Update packages:
  #   Update each package necessary for proper startup; the `package_update`
  #   function will avoid overwriting existing binaries if it's able to.

  display_centered 'Setting up software...'
  log "Software update started at `date`"

  local total_packages='0'
  local finished_packages='0'

  for package_path in /mnt/startup/packages/*.vpkg; do
    total_packages="$(($total_packages + 1))"
  done

  for package_path in /mnt/startup/packages/*.vpkg; do
    package_update "$package_path" "$is_newly_initialized" \
      || fatal 'Failed to extract required software from disk/image'

    finished_packages="$(($finished_packages + 1))"
    local percent_packages="$((100 * $finished_packages / $total_packages))"

    display_centered "Setting up software ($percent_packages% complete)..."
  done

  log "Software update finished at `date`"
  display_centered 'Checking authentication database...'

  persist_authentication_database >> "$log" 2>&1 \
    || fatal 'Failed to initialize authentication database'

  display_centered 'Starting services...'

  supervisor_reset \
    || fatal "Failed to reset supervisor status information"

  for dir in /srv/scripts/*; do
    if [ -f "$dir/start" ]; then
      local pkg="`basename -- "$dir"`"
      supervisor_start "$pkg" \
        || fatal "Failed to start required network service '$pkg'"
    fi
  done

  display_centered 'Releasing startup disk...'

  unmount_source_image "$source_device" \
    || fatal 'Failed to unmount ISO image; possible problem with media'

  display_centered 'Synchronizing disks...'
  synchronize_disks
  set_bold 0

  return 0
}

warn()
{
  log "Warning: $*\n"
}

fatal()
{
  clear

  print '\n'
  print 'An unrecoverable error has occurred.'
  print 'The virtual machine cannot start properly at this time.'
  print "Details: $*."
  print
  print 'Please contact technical support and provide this error message.'
  print

  log "Fatal error at `date`:\n  $*"

  sleep 15
  read line

  set_echo 1
  set_cursor 1

  print 'Attempting to start recovery console...'
  exec /sbin/getty -nl /boot/recovery-console 38400 tty1
}

main
exit "$?"

