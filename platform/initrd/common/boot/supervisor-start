#!/bin/sh

source '/boot/include/utility'
source '/boot/include/supervisor'

main()
{
  if [ "$#" -le 0 -o "$1" = '-h' -o "$1" = '--help' ]; then
    usage
  fi

  require_root
  supervisor_init

  local package="$1"
  shift 1

  local is_failure=''

  # Strict mode:
  #  The internal implementation of `supervisor_start` is tolerant of
  #  packages that are already-watched or disabled; it issues warnings
  #  but not errors. Check these ignored conditions when in strict mode.

  if [ "$#" -gt 0 ]; then
    for service in "$@"; do
      if supervisor_is_service_disabled "$package" "$service"; then
        is_failure='t'
        warn "Service '$package/$service' is disabled"
      elif supervisor_is_service_watched "$package" "$service"; then
        is_failure='t'
        warn "Service '$package/$service' is already supervised"
      fi
    done
  fi

  if [ "$is_failure" ]; then
    fatal "One or more specified services cannot be supervised"
  fi
  
  supervisor_start "$package" "$@"
  local rv="$?"

  if [ "$rv" -eq 253 ]; then
    warn "Package '$package' has no services to start"
  elif [ "$rv" -ne 0 ]; then
    warn "Failed to start one or more specified services"
  else
    success "Supervisor running for all services in package '$package'"
  fi

  return "$rv"
}

usage()
{
  echo "Usage: $0 <package-name> [service-name]..." >&2
  exit 111
}

main "$@"
exit "$?"

