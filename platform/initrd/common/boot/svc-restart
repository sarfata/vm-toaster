#!/bin/sh

source '/boot/include/utility'
source '/boot/include/supervisor'

restart()
{
  local package="$1"
  local service="$2"
  local is_wildcard="$3"

  # Sanity check:
  #   Make sure the service we're trying to restart actually exists.

  if ! supervisor_service_exists "$package" "$service"; then
    return 1
  fi

  if [ "$is_wildcard" ]; then
    if supervisor_is_service_disabled "$package" "$service"; then
      warn "Service '$package/$service' is disabled; skipping"
      return 0
    elif supervisor_is_service_down "$package" "$service"; then
      warn "Service '$package/$service' is stopped; skipping"
      return 0
    fi
  fi

  supervisor_service_restart "$package" "$service" \
    || fatal "Failed to restart service '$package/$service'"

  info "Service '$package/$service' restarted successfully"
  return 0
}

main()
{
  if [ "$#" -le 0 -o "$1" = '-h' -o "$1" = '--help' ]; then
    usage
  fi

  local package="$1"
  shift 1

  require_root
  supervisor_init

  local rv=''

  if [ "$#" -le 0 ]; then
    supervisor_list_all_services "$package" | while read service; do
      restart "$package" "$service" 't'
      local r="$?"; [ "$r" -eq 0 ] || exit "$r"
    done
    local rv="$?"
    [ "$rv" -ne 0 ] && return "$rv"
  else
    for service in "$@"; do
      restart "$package" "$service"
      rv="$?"
    done
  fi

  if [ "$rv" -ne 0 ]; then
    fatal "Failed to restart one or more services in package '$package'"
  fi

  success "Finished restarting services in package '$package'"
  return 0
}

usage()
{
  echo "Usage: $0 <package-name> [service-name]..."
  exit 111
}

main "$@"
exit "$?"

