#!/bin/bash

set -o pipefail

fatal() {

  echo >&2
  echo "Fatal: $@" >&2
  exit 111
}

usage() {

  local app="`basename "$0"`"
  local required_args='settings_path'
  local optional_args='platform [ instance_type [ build_options ] ]'

  echo "Usage: $app $required_args [ $optional_args ]" >&2
  exit 1
}

ssh_command() {

  local host="$1"
  local identity="$2"
  local remote_command="$3"

  local ssh_options='-q -o StrictHostKeyChecking=no -o RequestTTY=yes'

  if [ -z "$identity" ]; then
    ssh $ssh_options "$host" "$remote_command"
  else
    ssh $ssh_options -i "$identity" "$host" "$remote_command"
  fi

  return "$?"
}

main() {

  local settings="$1"
  local platform="$2"
  local instance_type="$3"
  local build_options="$4"

  local fs_size='20'
  local security_group='ssh-only'
  local iam_role='nightly-build-server'
  local time_zone='America/Los_Angeles'
  local default_availability_zone='us-west-2b'
  local ssh_key_name='nightly-builds@medicmobile.org'

  local vm_url='https://github.com/browndav/medic-os'
  local s3_base_url='https://medic-mobile.s3.amazonaws.com'

  local source_url="$s3_base_url/medic-os/build/source"
  local mirror_url="$s3_base_url/medic-os/mirror/source"

  if [ -z "$settings" -o $# -gt 4 ]; then
    usage
  fi

  if [ -z "$platform" ]; then
    platform='x64'
  fi

  if [ -z "$instance_type" ]; then
    if [ "$platform" = 'x86' ]; then
      instance_type='c1.medium'
    else
      instance_type='c3.2xlarge'
    fi
  fi

  local ami='';
  local ssh_private_key_path='';
  local ssh_private_key_contents='';

  case "$platform" in
    x64)
      ami='ami-ff527ecf' ;;
    x86)
      ami='ami-cffea7ff' ;;
  esac

  if [ "$time_zone" ]; then
    export TZ="$time_zone"
  fi

  if [ "$settings" ]; then
    source "$settings" \
      || fatal "Couldn't load settings data from '$settings'"

    settings="`cat "$settings"`" \
      || fatal "Couldn't read settings data from '$settings'"
  fi

  if [ "$SSH_PRIVATE_KEY" ]; then
    ssh_private_key_path="$SSH_PRIVATE_KEY"
    ssh_private_key_contents="`cat "$ssh_private_key_path"`" \
      || fatal "Couldn't read private key from '$ssh_private_key_path'"
  fi

  if [ -z "$EC2_AVAILABILITY_ZONE" ]; then
    EC2_AVAILABILITY_ZONE="$default_availability_zone"
  fi

  local n='16'
  local tab="`printf '\t'`"

  echo -n 'Creating instance... ' >&2

  local instance_data="`
    ec2-run-instances "$ami" \
      -t "$instance_type" -p "$iam_role" -b "/dev/sda1=:$fs_size" \
      -k "$ssh_key_name" -z "$EC2_AVAILABILITY_ZONE" -g "$security_group"
  `" &&
  \
  local instance_id="`
    echo "$instance_data" | grep ^INSTANCE | cut -d"$tab" -f2
  `"

  if [ -z "$instance_id" ]; then
    echo 'failed.' >&2
    fatal 'Failed to create instance'
  fi

  ec2-create-tags "$instance_id" \
    --tag Name="Nightly Build: Medic OS on `date +'%Y-%m-%d at %l:%M%P'`" \
    --tag Platform='Amazon Linux' --tag Environment="$platform" \
    --tag Backup='false' --tag User="browndav" &>/dev/null && \
  \
  echo "done." >&2
  echo "Instance identifier: $instance_id"
  echo -n 'Discovering fully-qualified domain name... ' >&2
  \
  while [ -z "$external_fqdn" -a "$n" -gt 0 ]; do
    sleep 5 && n=$[$n - 1]
    local describe_data="`
      ec2-describe-instances "$instance_id" | grep ^PRIVATEIPADDRESS 
    `" &&
    local external_fqdn="`
      echo "$describe_data" | cut -d"$tab" -f4
    `"
  done

  if [ -z "$external_fqdn" ]; then
    echo 'failed.' >&2
    fatal 'Unable to discover host name for new instance'
  fi

  echo "done." >&2
  echo "Instance name: $external_fqdn"
  echo -n 'Waiting for instance to start... ' >&2

  local n='16'
  local rv='0'
  local ssh_id="$ssh_private_key_path"
  local ssh_host="ec2-user@$external_fqdn"

  if ! [ -f "$ssh_id" ]; then
    fatal "SSH private key file `$ssh_id` not found"
  fi

  while [ "$n" -gt 0 ]; do

    sleep 10 && n=$[n - 1]

    ssh_command "$ssh_host" "$ssh_id" \
      'mkdir -p medic-os/platform/config/aws-current .ssh' &&
    \
    echo 'done.' >&2 &&
    echo -n 'Establishing connection to instance... ' >&2 &&
    \
    echo "$settings" | ssh_command  "$ssh_host" "$ssh_id" \
      'cat > medic-os/platform/config/aws-current/settings' && \
    \
    echo "$ssh_private_key_contents" \
      | ssh_command  "$ssh_host" "$ssh_id" 'cat >> .ssh/id_rsa' && \
    \
    ssh_command  "$ssh_host" "$ssh_id" \
      "echo 'done.' >&2 &&
         echo 'Connection established successfully.' >&2 &&
         echo -n 'Setting up environment... ' >&2 &&
         \
         export TZ='$time_zone' &&
         source medic-os/platform/config/aws-current/settings &&
         echo 'done.' >&2 &&
         \
         echo -n 'Resizing filesystem... ' >&2 &&
         sudo resize2fs /dev/xvda1 &>/dev/null &&
         echo 'done.' >&2 &&
         \
         echo -n 'Updating system packages... ' >&2 &&
         sudo yum -q -y update &>/dev/null &&
         echo 'done.' >&2 &&
         \
         echo 'Downloading Medic OS core:' >&2 &&
         curl -O# '$source_url/medic-os-core-src-latest.tar.xz' &&
         echo 'Downloading Medic OS JDK/JRE module:' >&2 &&
         curl -O# '$source_url/medic-os-java-$platform-latest.tar.xz' &&
         echo 'Downloading Medic OS EC2 API tools module:' >&2 &&
         curl -O# '$source_url/medic-os-ec2-api-tools-latest.tar.xz' &&
         \
         echo -n 'Extracting Medic OS core image... ' >&2 &&
         sudo tar xJf medic-os-core-src-latest.tar.xz &&
         echo 'done.' >&2 &&
         \
         echo -n 'Installing build-time dependencies... ' >&2 &&
         sudo ./medic-os/platform/config/redhat/scripts/prepare-system \
           -q -y &>/dev/null &&
         echo 'done.' >&2 &&
         \
         echo -n 'Applying latest Medic OS updates... ' >&2 &&
         (cd medic-os/platform &&
           sudo git remote set-url origin "$vm_url" &&
           sudo git stash -q && sudo git pull -q) &&
         echo 'done.' >&2 &&
         \
         echo -n 'Extracting Medic OS JDK/JRE module... ' >&2 &&
         sudo tar xJf 'medic-os-java-$platform-latest.tar.xz' &&
         echo 'done.' >&2 &&
         \
         echo -n 'Extracting Medic OS EC2 API tools... ' >&2 &&
         sudo tar xJf medic-os-ec2-api-tools-latest.tar.xz &&
         echo 'done.' >&2 &&
         \
         cd medic-os &&
         sudo ln -nsf '$platform' java-current/selected &&
         \
         echo 'Starting Medic OS build process:' >&2 &&
         sudo make all \
           URL='$mirror_url' PLATFORM='$platform' $build_options &&
         \
         echo 'Medic OS build complete.' >&2 &&
         \
         echo -n 'Building EBS images:' >&2 &&
         ./platform/scripts/build-ebs-image \
           '$platform' output/*'-$platform-xen' \
             'Medic OS $platform - `date +%Y%m%d`' /dev/sdb && \
         \
         echo 'EBS images built successfully.' >&2 &&
         \
         echo 'Uploading ISO images:' >&2 &&
         ./platform/scripts/upload-iso-images \
           "$UPLOAD_METHOD" "$UPLOAD_USER" \
             "$UPLOAD_HOST" "$UPLOAD_TARGET" "$UPLOAD_OPTIONS" && \
         \
         echo 'ISO images uploaded successfully.' && sync"

    rv="$?"

    if [ "$rv" -ne 255 ]; then
      break
    fi
  done

  if [ "$rv" -eq 255 ]; then
    echo 'timeout.' >&2
    fatal 'Failed to connect to instance; timeout exceeded'
  elif [ "$rv" -ne 0 ]; then
    echo && echo 'Remote build process failed.' >&2
  fi

  echo -n 'Pausing before instance termination... ' >&2

  if [ "$rv" -eq 0 ]; then
    sleep 10
  else
    sleep 90
  fi

  echo 'done.' >&2
  echo -n 'Terminating instance... ' >&2

  ec2-terminate-instances "$instance_id" &>/dev/null \
    || fatal 'Failed to terminate instance'

  echo 'done.' >&2

  if [ "$rv" -ne 0 ]; then
    fatal 'Build process unsuccessful; no images created'
  fi
  
  echo 'Build complete.' >&2
  return 0
}

main "$@"
exit "$?"

